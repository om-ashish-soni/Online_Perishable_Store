package driverProduct;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
class DataBase implements Serializable{
	String filename=System.getProperty("user.home")+"/db.ser";
	public DataBase(){
		
	}
	public void saveCustomer(Customer cust1) {
		FileOutputStream fos=null;
		try {
			fos=new FileOutputStream(filename);
			ObjectOutputStream oos=new ObjectOutputStream(fos);
			oos.writeObject(cust1);
		}catch(Exception e) {
			System.out.println("Error");
			e.printStackTrace();
		}
	}
	public void updateCustomer(Customer cust1) {
		this.saveCustomer(cust1);
	}
//	public Customer getCustomer(int customerId) {
//		return new Customer();
//	}
}
class Date implements Comparable<Date>, Serializable{
    int day,month,year;
    String date;
    public Date(int day,int month , int year){
        this.date=year+"/"+month+"/"+day;
    }
    public String toString(){
        return this.date;
    }
    public int compareTo(Date d){
        if(0<this.date.compareTo(d.date)) return -1;
        return 0;
    }
}
class OrderComparator implements Comparator<Order>{
    public int compare(Order ord1,Order ord2){
        return ord1.getDate().compareTo(ord2.getDate());
    }
}
class DriverProduct{
	public void main(){
		Product p1,p2,p3;
		p1=new Vegetable("Potato","The potato is one of some 150 tuber-bearing species of the genus Solanum");
		p2=new Food();
		p2.setName("Pizza");
		p2.setDescription(", dish of Italian origin consisting of a flattened disk of bread dough topped with some combination of olive oil, ");
		p3=new Fruit("Mango","A mango is a sweet tropical fruit");
        Date dt=new Date(30,12,2021);
        OrderedItem o1=new OrderedItem(p1,3);
        OrderedItem o2=new OrderedItem(p2,98);
        OrderedItem o3=new OrderedItem(p3,5);
        Order order1=new Order();
        order1.addOrderedItem(o1);   
        order1.setDate(dt);
        order1.addOrderedItem(o2);
        dt=new Date(25,12,2021);
        Order order2=new Order();
        order2.setDate(dt);
        order2.addOrderedItem(o3);
        // System.out.println(order1);
        // Order orderDuplicate=Order.getOrder(order2.getId());
        
        // System.out.println(orderDuplicate);
        Customer cust1=new Customer(" om ashish soni");
        cust1.addOrder(order1);
        Customer custDuplicate=Customer.getCustomer(cust1.id);
        custDuplicate.addOrder(order2);
        cust1.sortOrders();
        System.out.println(custDuplicate);
        DataBase custDb=new DataBase(cust1);
		System.out.println("Total number of products : "+Product.getNumberOfProducts());
	}
}
class Address {
	String state,district,city,area,homeNumber,country;
	int pincode;
	public Address() {
		
	}
	public Address(String homeNumber,String area,int pincode,String city,String district,String state,String country) {
		this.homeNumber=homeNumber;
		this.area=area;
		this.pincode=pincode;
		this.city=city;
		this.state=state;
		this.country=country;
	}

	public String toString() {
		String adr=new String();
		adr=homeNumber + ", "+ area + " , " + pincode + ", "+city +" , "+district+" , "+ state + ", "+ country;
		return adr;
	}
}
class Customer implements Serializable{
	String name;
	int id;
	ArrayList<Order> orders=new ArrayList<Order>();
	static HashMap<Integer,Customer> customerOf=new HashMap<Integer,Customer>();
	static int customerCount;
	static Customer getCustomer(int id) {
		if(customerOf.containsKey(id)) {
			return customerOf.get(id);
		}
		return null;
	}
	static {
		customerCount=0;
	}
	private void setId() {
		customerCount++;
		this.id=customerCount;
		
	}
    public int getId(){
        return this.id;
    }
	Address billingAddress=null;
    public void addOrder(Order ord){
        this.orders.add(ord);
    }
    public void setBillingAddress(Address billingAddress){
        this.billingAddress=billingAddress;
    }
	public Customer(String name) {
		setId();
		this.name=name;
		this.billingAddress=null;
		customerOf.put(this.id,this);
	}
    public void sortOrders(){
        Collections.sort(orders,new OrderComparator());
    }
    public String toString(){
        String custString="";
        double totalAmount=0.0;
        
        custString+="\n-------------------------------------\n";
        custString += "Customer id : "+this.id+"\n";
        custString += "Customer name : "+this.name+"\n";
        custString+="-------------------------------------\n";
        for(Order ord: this.orders){
            custString+="-------------------------------------\n";
            if(ord.getTotalQuantity()>=100){
                custString+="__________LARGE ORDER___________\n";
            }
            custString+=ord.toString();
            totalAmount+=ord.getTotalAmount();
            custString+="-------------------------------------\n";
        }
        custString += "Total Amount Of All Orders : "+totalAmount+"\n";
        custString+="-------------------------------------\n\n";
        return custString;
    }
}

public class DriverBusinessDomainProduct{
	public static void main(String[] args){
		DriverProduct driverProduct=new DriverProduct();
		driverProduct.main();
	}
}
class Order implements Serializable{
	static HashMap<Integer,Order> orderOf=new HashMap<Integer,Order>();
	static int numberOfOrders=0;
    Date date;
	int id;
	Customer cust=null;
	double totalAmount=0.0;
    int totalQuantity=0;
	ArrayList<OrderedItem> itemList=new ArrayList<OrderedItem>();
    public int getTotalQuantity(){
        return this.totalQuantity;
    }
    public int getId(){
        return this.id;
    }
    public Date getDate(){
        return this.date;
    }
    public void setDate(Date date){
        this.date=date;
    }
	private void generateId() {
		numberOfOrders++;
		this.id=numberOfOrders;
        orderOf.put(this.id,this);
	}
	public static Order getOrder(int id) {
		if(orderOf.containsKey(id)) {
			return orderOf.get(id);
		}
		return null;
	}
    public void addOrderedItem(OrderedItem oitem){
        this.itemList.add(oitem);
        this.totalAmount+=oitem.product.getPrice()*oitem.getQuantity();
        this.totalQuantity+=oitem.getQuantity();
    }
	public Order() {
		generateId();
		
	}
    public double getTotalAmount(){
        return this.totalAmount;
    }
    public String toString(){
        String orderString=new String("");
        orderString+="Order id : "+this.id+"\n";
        orderString+="Order date : "+this.date.toString()+"\n\n";
        int itemCount=0;
        for(OrderedItem orderedItem: this.itemList){
            orderString+="Item no: "+(itemCount+1);
            orderString+=orderedItem.toString();
            itemCount++;
            orderString+="\n\n";
        }
        orderString+="Total number of diffrent items : "+itemCount+"\n";
        orderString+="Total Quantity of all ordered items : "+this.totalQuantity+"\n";
        orderString+="Total Amount : "+this.totalAmount+"\n\n";
        return orderString;
    }
}
class OrderedItem implements Serializable{
	Product product=null;
	int quantity;
    public int getQuantity(){
        return this.quantity;
    }
	public OrderedItem(Product product,int quantity) {
		this.product=product;
		this.quantity=quantity;
	}
    // @Override
    public String toString(){
        return new String(this.product.toString()+"Quantity = "+this.quantity);
    }
}
class Food extends Product implements Serializable{
	
	public Food(){
	}
	public Food(String name,String description){
		super(name,description,"Food");
	}
	public String getType(){
		return new String("Food");
	}
	public String toString(){
		String str=new String();
		str="\ntype = "+this.getType()+" ; \nid = "+this.getId()+" ; \n"+"name = "+this.getName()+" ; \n"+"description = "+this.getDescription()+"\n"+"price = "+this.getPrice()+"\n";
		return str;
	}
}
class Fruit extends Product implements Serializable{
	
	
	
	public Fruit(){
	}
	public Fruit(String name,String description){
		super(name,description,"Fruit");
	}
	public String getType(){
		return new String("Fruit");
	}
	public String toString(){
		String str=new String();
		str="\ntype = "+this.getType()+" ; \nid = "+this.getId()+" ; \n"+"name = "+this.getName()+" ; \n"+"description = "+this.getDescription()+"\n"+"price = "+this.getPrice()+"\n";
		return str;
	}
}
abstract class Product implements Serializable{
	static int numberOfProducts;
	static HashMap<String,Double> priceOf=new HashMap<String,Double>();
	static HashMap<String,Integer> availableQuantityOf=new HashMap<String,Integer>();
	String name,description,type;
	int id;
	double price;
	static{
		numberOfProducts=0;
		priceOf.put("mango",60.00);
		priceOf.put("pizza", 90.00);
		priceOf.put("potato", 40.00);
		availableQuantityOf.put("mango",50);
		availableQuantityOf.put("pizza", 40);
		availableQuantityOf.put("potato", 100);
	}
	
	public static int getNumberOfProducts(){
		return numberOfProducts;
	}
	private void generateId() {
		this.id=numberOfProducts;
	}
	private void setPrice() {
		if(priceOf.containsKey(this.getName().toLowerCase())) {
			this.price=priceOf.get(this.getName().toLowerCase());
		}
	}
	public void setName(String name){
		this.name=name;
	}
	public void setDescription(String description){
		this.description=description;
	}
	public int getId(){
		return this.id;
	}
	public String getName(){
		return this.name;
	}
	public String getDescription(){
		return this.description;
	}
	public String getType(){
		return new String("Default Product");
	}
	public double getPrice() {
		return this.price;
	}
	public Product(){
		Product.numberOfProducts++;
	}
	public Product(String name,String description,String type){
		Product.numberOfProducts++;
		generateId();
		this.name=name;
		this.description=description;
		this.type=type;
		setPrice();
	}
	public String toString(){
		String str=new String();
		str="\nid = "+id+" ; \n"+"name = "+name+" ; \n"+"description = "+description+"\n"+"price = "+price+"\n";
		return str;
	}
}
class Vegetable extends Product implements Serializable{
	
	public Vegetable(){
	}
	public Vegetable(String name,String description){
		super(name,description,"Vegetable");
	}
	public String getType(){
		return new String("Vegetable");
	}
	public String toString(){
		String str=new String();
		str="\ntype = "+this.getType()+" ; \nid = "+this.getId()+" ; \n"+"name = "+this.getName()+" ; \n"+"description = "+this.getDescription()+"\n"+"price = "+this.getPrice()+"\n";
		return str;
	}
}